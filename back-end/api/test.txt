essdeliveryapp 
enrique laborão 
guilherme morone 
lucca gioia 
mateus elias 
rafael leite 
raul coelho 
williams santiago tecnologiasferramenta s 
utilizadas testes interface gui servidor 
jest 
supertest 
reduxsagatestplan 
enzyme 
cucumberpuppeteer reactjs 
bootstrap 
redux 
reactrouterdom 
styledcomponents nodejs 
expressjs 
jsonquery para o projeto no geral 
cronograma e divisão de 
tarefas divisão 
enrique 
●roteamento das 
páginas 
●feature de carrinho 
tela e endpoints 
●implementação do 
header 
●implementação base 
do reactredux guilherme 
●implementação da tela 
inicial 
●feature de avaliação 
de pedidos inclui seus 
endpoints 
●implementação da 
classe para 
manipulação dos 
arquivos json lucca 
●feature de fazer 
pedidos 
funcionalidade do 
menu 
●endpoint de makeorder mateus 
●feature de histórico de 
pedidos 
●endpoint de orders 
getmethods 
rafael 
●feature de status do 
pedido 
●endpoint de 
restaurantes get raul 
●feature de 
cancelamento de 
pedido 
●endpoint de 
cancelorder 
●endpoint de usuário williams 
●feature de fazer 
pedidos design do 
menu 
●cálculo do tempo de 
entrega 
●endpoint de 
restaurantes get vale ressaltar as 
tarefas feitas em 
conjunto 
● testes 
● slides 
● suporte ao time cronograma 
sprint  
   
●implementação base 
da aplicação 
●desenvolvimento do 
design das telas sprint  
   
●repositórios setados e 
organizados 
●reunião para divisão 
de tarefas sprint  
   
●servidor e cliente 
criados 
●templates feitos sprint  
   
●implementação das 
telas
sprint  
   
●implementação das 
telas 
●refatoração de código sprint  
   
●criação dos slides 
●criação do ambiente 
para testes 
●início dos testes 
●refatoração de código sprint  final 
   
●pequenos ajustes nos 
slides da apresentação 
ﬁnal 
●término dos testes servidor deﬁnição da api e criação dos endpoints 
nos próximos slides mostraremos 
com detalhes cada endpoint criado 
mas antes de tudo vamos mostrar a 
criação da classe para manipular 
“banco de dados” arquivos json 
testes construção da classe métodos básicos 
métodos especiais
user e restaurant 
order 
inicialização 
 get methods order  post methods 
cart  get 
cart  post 
frontend gui inicialização do reactapp construção e estrutura da aplicação 
uma aplicação react pode ser construída de diversas formas porém 
optamos por esta que explicaremos a seguir 
divisão em 
componentes 
utilização de 
reactredux 
ducks
sagas
styledcomponents explicaremos em detalhes mais adiante… componente principal e rotas 
infelizmente a aplicação é muito grande para ser mostrada inteiramente aqui 
vamos seguir em diante diretamente pelo código 
porém vamos listar abaixo os componentes e features restantes 
outros
 redux duckssagas 
 componentes 
utilsmisc 
utilsstyles 
servicesapi 
constantsconstants 
assetsheaderassets arquivos indexjs 
cart
history
menu
order
restaurant 
usercart
header
history
home
menu
orderdetails 
notfound testes backend frontend agora vamos mostrar os testes dos cenáriosfeatures 
diretamente pelo código 
com isso a apresentação termina por aqui essdeliveryapp 
enrique laborão 
guilherme morone 
lucca gioia 
mateus elias 
rafael leite 
raul coelho 
williams santiago tecnologiasferramenta s 
utilizadas testes interface gui servidor 
jest 
supertest 
reduxsagatestplan 
enzyme 
cucumberpuppeteer reactjs 
bootstrap 
redux 
reactrouterdom 
styledcomponents nodejs 
expressjs 
jsonquery para o projeto no geral 
cronograma e divisão de 
tarefas divisão 
enrique 
●roteamento das 
páginas 
●feature de carrinho 
tela e endpoints 
●implementação do 
header 
●implementação base 
do reactredux guilherme 
●implementação da tela 
inicial 
●feature de avaliação 
de pedidos inclui seus 
endpoints 
●implementação da 
classe para 
manipulação dos 
arquivos json lucca 
●feature de fazer 
pedidos 
funcionalidade do 
menu 
●endpoint de makeorder mateus 
●feature de histórico de 
pedidos 
●endpoint de orders 
getmethods 
rafael 
●feature de status do 
pedido 
●endpoint de 
restaurantes get raul 
●feature de 
cancelamento de 
pedido 
●endpoint de 
cancelorder 
●endpoint de usuário williams 
●feature de fazer 
pedidos design do 
menu 
●cálculo do tempo de 
entrega 
●endpoint de 
restaurantes get vale ressaltar as 
tarefas feitas em 
conjunto 
● testes 
● slides 
● suporte ao time cronograma 
sprint  
   
●implementação base 
da aplicação 
●desenvolvimento do 
design das telas sprint  
   
●repositórios setados e 
organizados 
●reunião para divisão 
de tarefas sprint  
   
●servidor e cliente 
criados 
●templates feitos sprint  
   
●implementação das 
telas
sprint  
   
●implementação das 
telas 
●refatoração de código sprint  
   
●criação dos slides 
●criação do ambiente 
para testes 
●início dos testes 
●refatoração de código sprint  final 
   
●pequenos ajustes nos 
slides da apresentação 
ﬁnal 
●término dos testes servidor deﬁnição da api e criação dos endpoints 
nos próximos slides mostraremos 
com detalhes cada endpoint criado 
mas antes de tudo vamos mostrar a 
criação da classe para manipular 
“banco de dados” arquivos json 
testes construção da classe métodos básicos 
métodos especiais
user e restaurant 
order 
inicialização 
 get methods order  post methods 
cart  get 
cart  post 
frontend gui inicialização do reactapp construção e estrutura da aplicação 
uma aplicação react pode ser construída de diversas formas porém 
optamos por esta que explicaremos a seguir 
divisão em 
componentes 
utilização de 
reactredux 
ducks
sagas
styledcomponents explicaremos em detalhes mais adiante… componente principal e rotas 
infelizmente a aplicação é muito grande para ser mostrada inteiramente aqui 
vamos seguir em diante diretamente pelo código 
porém vamos listar abaixo os componentes e features restantes 
outros
 redux duckssagas 
 componentes 
utilsmisc 
utilsstyles 
servicesapi 
constantsconstants 
assetsheaderassets arquivos indexjs 
cart
history
menu
order
restaurant 
usercart
header
history
home
menu
orderdetails 
notfound testes backend frontend agora vamos mostrar os testes dos cenáriosfeatures 
diretamente pelo código 
com isso a apresentação termina por aqui 